# @package _global_

# to execute this experiment run:
# python train.py experiment=example

# python train.py -m experiment=base_gpu hydra/sweeper=optuna

defaults:
  - override /datamodule: heichole.yaml
  - override /model: baseline.yaml
  - override /callbacks: default.yaml
  - override /logger: wandb.yaml
  - override /trainer: default.yaml

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

# name of the run determines folder name in logs
name: "helchole_basic"

seed: 12345

trainer:
  min_epochs: 10
  max_epochs: 50
  gradient_clip_val: 0.3
  gpus: 1

model:
  lr: 0.0002
  weight_decay: 0.001
  mlp:
    hidden_size: 128

datamodule:
  batch_size: 64
  seq_len: 1


logger:
  wandb:
    project: "helchole_basic"


sweeper:
  _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

  # storage URL to persist optimization results
  # for example, you can use SQLite if you set 'sqlite:///example.db'
  storage: null

  # name of the study to persist optimization results
  study_name: null

  # number of parallel workers
  n_jobs: 1

  # 'minimize' or 'maximize' the objective
  direction: maximize

  # total number of runs that will be executed
  n_trials: 25

  # choose Optuna hyperparameter sampler
  # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
  sampler:
    _target_: optuna.samplers.TPESampler
    seed: 12345
    n_startup_trials: 5 # number of random sampling runs before optimization starts

  # define range of hyperparameters
  search_space:
    datamodule.batch_size:
      type: categorical
      choices: [32, 64, 128]
    model.lr:
      type: float
      low: 0.0001
      high: 0.01
    model.weight_decay:
      type: float
      low: 0.0005
      high: 0.1
    model.mlp.hidden_size:
      type: categorical
      choices: [32, 64, 128, 256, 512, 1024]
    model.backbone_model:
      type: categorical
      choices: ['resnet34', 'resnet18']